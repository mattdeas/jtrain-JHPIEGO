import { useDataQuery, useDataMutation } from '@dhis2/app-runtime'
import { CourseDetailsStaffView } from './CourseDetailsStaffView';
import { BrowserRouter as Router, Route, Link, Routes, useLocation , useParams} from 'react-router-dom';
import React, {useState, useEffect} from 'react'
// import delicon from './image/delete_icon.png'; 
// import magnify from './image/magnifying.png';
// import logo from './image/jtrainlogo.png';


function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
};

const handleResize = debounce(() => {
}, 200);

window.addEventListener('resize', handleResize);

const today = new Date();
const formattedDate = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;




const qryConstants = {
    // One query object in the whole query
    attributes: {
        // The `attributes` endpoint should be used
        resource: 'constants',
        params: {
            // Paging is disabled
            paging: false,
            // Only the attribute properties that are required should be loaded
            fields: 'id, displayName, code, value',
        },
    },
}

  const qryProgramFields = {
    program: {
      resource: 'programs',
      id: ({ id }) => id,
      params: {
        fields: ['id', 'name', 'programTrackedEntityAttributes[sortOrder,trackedEntityAttribute[id,name,valueType,mandatory,optionSet[id,name,options[id,code,name,displayName]]]]'],
      },
    },
};

const handleUpdate = () => {
};



const handleCancel = () => {
};

const qryTrackedEntityInstance = {
    trackedEntityInstance: {
        resource: 'trackedEntityInstances',
        id: ({ id }) => id,
        params: {
            fields: ['attributes[attribute,value]'],
        },
    },
};





const eventsQuery = (id) => ({
    events: {
        resource: 'events',
        params: {
            trackedEntityInstance: id,
            fields: ['event', 'status', 'program', 'orgUnit', 'dataValues[dataElement,value]'],
        },
    },
});
const dataElementQuery = {
    dataElement: {
        resource: 'dataElements',
        id: '{id}', // replace with the actual dataElement ID
        params: {
            fields: ['displayName'],
        },
    },
};

const DataElement = ({ dataElementId, value }) => {
    const dataElementQuery = {
        dataElement: {
            resource: 'dataElements',
            id: dataElementId,
            params: {
                fields: ['displayName'],
            },
        },
    };

    const { loading, error, data } = useDataQuery(dataElementQuery);

    if (loading) return <td>Loading...</td>;
    if (error) return <td>Error: {error.message}</td>;

    return (
        <>
            <td>{data.dataElement.displayName}</td>
            <td>{value}</td>
        </>
    );
};

const createMutation = (id, attributes) => ({
    resource: 'trackedEntityInstances',
    type: 'update',
    id: id,
    data: {
        orgUnit: 'VgrqnQEtyOP',
        attributes: Object.entries(attributes).map(([attribute, value]) => ({ attribute, value }))
    },
});

const mutationWorking = {
    resource: 'programs',
    id: ({ id }) => id,
    type: 'update',
    partial: true,
    data: ({ name }) => ({
        name,
    }),
}


const handleAssign = async (trackedEntityInstance) => {
        
    
    const type = 'ZBUwOGosqI0';
    // const { error: relationshipsError, data: relationshipsData } = await mutateRelationships({ trackedEntityInstance, eventID, type});
    // if (relationshipsError) {
    //     console.error('Error creating relationship:', relationshipsError);
    // } else {
    //     console.log('Relationship created successfully');
    //     console.log('Relationship data:', relationshipsData);
    // }

    const { error } = await mutate({ trackedEntityInstance });
    console.log('mutation', mutate)
    if (error) {
        console.error('Error creating event:', error);
    } else {
        console.log('Event created successfully');
    }
};

const newEvent = {
    resource: 'events',
    type: 'create',
    data: ({ trackedEntityInstance }) => ({
        events: [
            {
                trackedEntityInstance,
                program: 'Ss21byybIqu',
                programStage: 'Y6scAJvghc0',
                enrollment: 'qIuyPn7AVu2',
                orgUnit: 'VgrqnQEtyOP',
                dataValues: [
                    {
                        dataElement: 'tsU3YD7kfYU',
                        value: eventID,
                    },
                ],
                status: 'ACTIVE',
                eventDate: formattedDate,
            },
        ],
    }),
};

const mutation = (id) => ({
    resource: 'trackedEntityInstances',
    id: id,
    type: 'update',
    data: ({ orgUnit, attributes }) => ({
        orgUnit,
        attributes,
    }),
});



export const Staffview = () => {
    const { id } = useParams();
    const dSysConstants = useDataQuery(qryConstants)
    const [trackedEntityInstance, setTrackedEntityInstance] = useState(null);
    const [formFields, setFormFields] = useState({});
    const [mutate, { loading, error }] = useDataMutation(mutation(id))
    console.log(id);
    const { loading: loadingEntity, error: errorEntity, data: dataEntity } = useDataQuery(qryTrackedEntityInstance, {
        variables: {
         id,
        },
    });



     const qryProgramDataElements = {
         "qPDE": {
             resource: 'programStages',
                "id": 'Y6scAJvghc0',
                "params": {
                    "fields": "programStageDataElements[program[id,Ss21byybIqu],dataElement[id,displayName],sortOrder]",
                },

         },
    }

    // Define the query outside the component
const EVENTS_QUERY = {
    events: {
        resource: 'events',
        params: {
            fields: ['event', 'dataValues[dataElement,value]'],
            event: ({ eventIds }) => eventIds.join(';'),
        },
    },
};

    const dataProgramDE  = useDataQuery(qryProgramDataElements);

    console.log('dataProgramDE', dataProgramDE)

    const { loading: loadingDataElement, error: errorDataElement, data: dataElementData } = useDataQuery(dataElementQuery);
    console.log('dsysContstants',dSysConstants)
    const [responseMessage, setResponseMessage] = useState('');
    const { loading: loadingEvents, error: errorEvents, data: eventsData } = useDataQuery(eventsQuery(id));
    useEffect(() => {
    if (!loadingEvents && !errorEvents && eventsData?.events) {
        setEvents(eventsData.events.events);
        }   
        }, [eventsData, loadingEvents, errorEvents]);

    
    console.log('eventsData', eventsData)
    let defOrgUnit = null;
    if (dSysConstants && dSysConstants.data && dSysConstants.data.attributes && dSysConstants.data.attributes.constants) {
        const defOrgUnitObj = dSysConstants.data.attributes.constants.find(constant => constant.displayName === 'jtrain-DefaultStaffOrgUnit');
        defOrgUnit = defOrgUnitObj ? defOrgUnitObj.code : null;
    }
    
    
    const attributes = Object.entries(formFields).map(([attribute, value]) => ({ attribute, value }));

    const doMutation = async () => {
        try {
                        // Pass the mutation object to the mutate function
                        //const response = await mutate(MutateTEI);
                        //const response = await mutate({ id: id,
                        // orgUnit: defOrgUnit, attributes });
                        const response = await mutate({ orgUnit: defOrgUnit, attributes });
                        if (!response || (error && error.length > 0)) {
                            setResponseMessage('Failed to upload data');
                            console.error('Error:', error);
                        } else {
                            setResponseMessage('Data uploaded successfully!');
                            console.log(response);
                        }
                    } catch (error) {
                        setResponseMessage('An error occurred while uploading data');
                        console.error('Error:', error);
                    }
        
    }

    const handleFormSubmit = async (event) => {
        event.preventDefault();
        doMutation();
    };

    const handleInputChange = (event) => {
        console.log(event)

        const { name, value } = event.target;
        setFormFields(prevFields => ({
            ...prevFields,
            [name]: value,
        }));
        console.log('formfields', formFields)
    };

    const handleInputChangeSelect = (event) => {
        const { name, value } = event.target;
        //console.log(`Option ID/Code: ${name}, Option Name: ${value}`);
        setFormFields(prevFields => ({ ...prevFields, [name]: value }));
    };
    

    let staffMemberid, defaultStaffOrgUnit, defaultStaffProg;
    // Check if dSysConstants and constants exist
    if (dSysConstants && dSysConstants.data && dSysConstants.data.attributes && dSysConstants.data.attributes.constants) {
        // Find the jtrain-TEI-Type-Staff and jtrain-DefaultStaffOrgUnit objects
        const staffMemberObj = dSysConstants.data.attributes.constants.find(item => item.displayName === 'jtrain-TEI-Type-Staff');
        const defaultStaffOrgUnitObj = dSysConstants.data.attributes.constants.find(item => item.displayName === 'jtrain-DefaultStaffOrgUnit');
        const defaultStaffProgObj = dSysConstants.data.attributes.constants.find(item => item.displayName === 'jtrain-StaffProgram');
        
        // Extract the values
        staffMemberid = staffMemberObj ? staffMemberObj.code : null;
        defaultStaffOrgUnit = defaultStaffOrgUnitObj ? defaultStaffOrgUnitObj.code : null;
        defaultStaffProg = defaultStaffProgObj ? defaultStaffProgObj.code : null;
    }

    const { loading: loading1, error1, data } = useDataQuery(qryProgramFields, {
        variables: {
          id:  "Ss21byybIqu", // Use the ID of the program you want to fetch
        },
    });

    
    const [events, setEvents] = useState([]);

    // const transposedEvents = events.map(event => {
    //     console.log('event', event)
    //     const eventObj = { event: event.event };
    //     event.dataValues.forEach(dataValue => {
    //         if (dataProgramDE && dataProgramDE.data && dataProgramDE.data.qPDE) {
    //             console.log('dataProgramDE', dataProgramDE)
    //             const matchingElement = dataProgramDE.data.qPDE.programStageDataElements.find(element => element.dataElement.id === dataValue.dataElement);
    //             //console.log('element.dataElement.id', element.dataElement.id)
    //             console.log('dataValue.dataElement',dataValue.dataElement)
    //             if (matchingElement) {
    //                 eventObj[matchingElement.dataElement.displayName] = dataValue.value;
    //                 eventObj.sortOrder = matchingElement.sortOrder;
    //             }
    //         }
    //     });
    //     console.log('eventObj', eventObj)
    //     return eventObj;
    // });

    
    let transposedEvents = [];

if (dataProgramDE && dataProgramDE.data && dataProgramDE.data.qPDE && dataProgramDE.data.qPDE.programStageDataElements) {
    transposedEvents = events.map(event => {
        const eventObj = { event: event.event };
        event.dataValues.forEach(dataValue => {
            const matchingElement = dataProgramDE.data.qPDE.programStageDataElements.find(element => element.dataElement.id === dataValue.dataElement);
            if (matchingElement) {
                eventObj[matchingElement.dataElement.displayName] = dataValue.value;
            }
        });
        return eventObj;
    });
} else {
    // Fetch the necessary data here
    // This will depend on how you're fetching data in your application
}

    
 
   
    useEffect(() => {
        if (!loadingEntity && !errorEntity && dataEntity?.trackedEntityInstance?.attributes) {
            setTrackedEntityInstance(dataEntity.trackedEntityInstance.attributes);
        }
    }, [dataEntity, loadingEntity, errorEntity]);
    

    useEffect(() => {
        if (trackedEntityInstance) {
            const initialFormFields = trackedEntityInstance.reduce((fields, attr) => ({
                ...fields,
                [attr.attribute]: attr.value,
            }), {});
        
            setFormFields(initialFormFields);
        }
    }, [trackedEntityInstance]);

    const findAttributeValue = (attributeId) => {
        // If the attribute value exists in formFields, return it
        if (formFields[attributeId]) {
            return formFields[attributeId];
        }
    
        // Otherwise, find the attribute value in trackedEntityInstance
        if (trackedEntityInstance) {
            const attribute = trackedEntityInstance.find(attr => attr.attribute === attributeId);
            return attribute ? attribute.value : '';
        }
    
        return '';
    };
    
    return (
        <div style={{ display: 'flex', justifyContent: 'space-between' }}>
  <div style={{ flex: '0 0 50%' }}>
    <h1>Staff Details</h1>

    {
      loading1 && 'Loading...'
    }

    {
      error && error.message
    }

    {
    // if there is any data available
    data?.program?.programTrackedEntityAttributes && (
            
        <form onSubmit={handleFormSubmit}>
            <table>
                <thead>
                    <tr>
                        {/* <th >ID</th> */}
                        <th>Name</th>
                        <th>Value</th>
                    </tr>
                </thead>
                <tbody>
                    {data.program.programTrackedEntityAttributes.map(({ trackedEntityAttribute }) => (
                    trackedEntityAttribute.name !== 'jtrain_staff_courses' && (
                        <tr key={trackedEntityAttribute.id}>
                            {/* <td style={{width: '0px'}}>{trackedEntityAttribute.id}</td> */}
                            <td>
                                <label>{trackedEntityAttribute.name}</label>
                            </td>
                            
                            <td>
                                {trackedEntityAttribute.valueType === 'TEXT' ? (
                                    trackedEntityAttribute.optionSet && trackedEntityAttribute.optionSet.options ? (
                                        <select name={trackedEntityAttribute.id} onChange={handleInputChangeSelect}>
                                            {trackedEntityAttribute.optionSet.options.map(option => (
                                                <option key={option.id} value={option.code}>
                                                    {option.name}
                                                </option>
                                            ))}
                                        </select>
                                    ) : (
                                        <input type="text" name={trackedEntityAttribute.id} value={findAttributeValue(trackedEntityAttribute.id)} onChange={handleInputChange}  />
                                    )
                                ) : trackedEntityAttribute.valueType === 'DATE' ? (
                                    <input type="text" name={trackedEntityAttribute.id} value={findAttributeValue(trackedEntityAttribute.id)}  onChange={handleInputChange}/>
                                ) : trackedEntityAttribute.valueType === 'NUMBER' ? (
                                    <input type="text" name={trackedEntityAttribute.id} value={findAttributeValue(trackedEntityAttribute.id)} onChange={handleInputChange}/>
                                ) : (
                                    trackedEntityAttribute.valueType
                                )}
                            </td>
                        </tr>
                    )
                ))}
            </tbody>
            </table>
            <button type="submit">Submit</button>
            <p>{responseMessage}</p>
            
            
   
        </form>

        
    )
}
  </div>
  <div style={{ flex: '0 0 50%' }}>
        <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between' }}>
        <h2>Courses</h2>
        <Link to="/trainingcapture">
            <button style={{
            background: 'linear-gradient(to right, darkblue, cyan)',
            border: 'none',
            color: 'white',
            padding: '15px 32px',
            textAlign: 'center',
            textDecoration: 'none',
            display: 'inline-block',
            fontSize: '16px',
            borderRadius: '12px'
            }}>Go to Training Capture</button>
        </Link>
        </div>
    <table>
 
<thead>
<tr>
{transposedEvents.length > 0 && dataProgramDE?.data?.qPDE?.programStageDataElements.map(({ dataElement }) => {
    if (dataElement.displayName.startsWith('jtrain')) {
        if (dataElement.displayName === 'jtrain_course_eventid') {
            return (
                <th key={dataElement.id}>
                    Training Event
                </th>
            );
        } else {
            return null; // This will not render the column
        }
    } else {
        return (
            <th key={dataElement.id}>
                {dataElement.displayName}
            </th>
        );
    }
})}
</tr>
</thead>
<tbody>
{transposedEvents.length > 0 ? (
  transposedEvents.map((eventObj, index) => (
    <tr key={eventObj.event}>
      {dataProgramDE?.data?.qPDE?.programStageDataElements.map(({ dataElement }, cellIndex) => (
        <td key={dataElement.id} style={{ textAlign: 'center' }}>
          {cellIndex === 0 ? <CourseDetailsStaffView course={eventObj[dataElement.displayName]} /> : eventObj[dataElement.displayName]}
        </td>
      ))}
    </tr>
  ))
) : (
  <p>No Courses attended</p>
)}
</tbody>
    </table>
  </div>
  </div>
)
}


